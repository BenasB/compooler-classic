schema {
  query: Query
  mutation: Mutation
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type Query {
  groups(where: GroupFilterInput order: [GroupSortInput!]): [Group!]!
  groupById(id: Int!): Group
  nearestGroups(userStartLocation: CoordinatesInput! userEndLocation: CoordinatesInput! where: GroupFilterInput): [Group!]!
}

type Mutation {
  createGroup(input: CreateGroupInput!): CreateGroupPayload!
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload!
  joinGroup(input: JoinGroupInput!): JoinGroupPayload!
  abandonGroup(input: AbandonGroupInput!): AbandonGroupPayload!
}

input GroupFilterInput {
  and: [GroupFilterInput!]
  or: [GroupFilterInput!]
  id: IntOperationFilterInput
  startTime: TimeSpanOperationFilterInput
  days: DaysOfWeekOperationFilterInput
  startLocation: CoordinatesFilterInput
  endLocation: CoordinatesFilterInput
  totalSeats: IntOperationFilterInput
  driver: UserFilterInput
  passengers: ListFilterInputTypeOfUserFilterInput
}

input GroupSortInput {
  id: SortEnumType
  startTime: SortEnumType
  days: SortEnumType
  startLocation: CoordinatesSortInput
  endLocation: CoordinatesSortInput
  totalSeats: SortEnumType
  driver: UserSortInput
}

type AuthenticationError implements Error {
  message: String!
}

type ArgumentError implements Error {
  message: String!
  paramName: String
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input TimeSpanOperationFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan]
  nin: [TimeSpan]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input DaysOfWeekOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
}

input CoordinatesFilterInput {
  and: [CoordinatesFilterInput!]
  or: [CoordinatesFilterInput!]
  latitude: FloatOperationFilterInput
  longitude: FloatOperationFilterInput
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: StringOperationFilterInput
  driving: ListFilterInputTypeOfGroupFilterInput
  passengering: ListFilterInputTypeOfGroupFilterInput
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

enum SortEnumType {
  ASC
  DESC
}

input CoordinatesSortInput {
  latitude: SortEnumType
  longitude: SortEnumType
}

input UserSortInput {
  id: SortEnumType
}

interface Error {
  message: String!
}

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ListFilterInputTypeOfGroupFilterInput {
  all: GroupFilterInput
  none: GroupFilterInput
  some: GroupFilterInput
  any: Boolean
}

input CoordinatesInput {
  latitude: Float!
  longitude: Float!
}

type Group {
  id: Int!
  startTime: TimeSpan!
  days: Int!
  startLocation: Coordinates!
  endLocation: Coordinates!
  totalSeats: Int!
  driver: User!
  passengers: [User!]!
}

type User {
  id: String!
  driving: [Group!]!
  passengering: [Group!]!
}

type Coordinates {
  distance(to: CoordinatesInput!): Float!
  latitude: Float!
  longitude: Float!
}

input CreateGroupInput {
  startTime: TimeSpan!
  days: Int!
  startLocation: CoordinatesInput!
  endLocation: CoordinatesInput!
  totalSeats: Int!
}

union CreateGroupError = AuthenticationError

type CreateGroupPayload {
  group: Group
  errors: [CreateGroupError!]
}

input DeleteGroupInput {
  id: Int!
}

union DeleteGroupError = AuthenticationError | ArgumentError

type DeleteGroupPayload {
  id: Int
  errors: [DeleteGroupError!]
}

input JoinGroupInput {
  id: Int!
}

union JoinGroupError = AuthenticationError | ArgumentError

type JoinGroupPayload {
  group: Group
  errors: [JoinGroupError!]
}

input AbandonGroupInput {
  id: Int!
}

union AbandonGroupError = AuthenticationError | ArgumentError

type AbandonGroupPayload {
  group: Group
  errors: [AbandonGroupError!]
}